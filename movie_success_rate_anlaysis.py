# -*- coding: utf-8 -*-
"""Movie Success Rate Anlaysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unfOcUoJ2xtb24xZC5JJ6XaXbSYT3_-G
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
nltk.download('vader_lexicon')

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('Movie data.csv')
df.head()

df.isnull().sum()

df[['Review', 'Rating', 'Sentiment']].head()

import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Initialize
sid = SentimentIntensityAnalyzer()

# Apply to your data
df['VADER_Score'] = df['Review'].apply(lambda x: sid.polarity_scores(x)['compound'])

from sklearn.metrics import accuracy_score

# Compare VADER sentiment with original labels
accuracy = accuracy_score(df['Sentiment'], df['VADER_Sentiment'])
print(f"VADER Sentiment Accuracy: {accuracy:.2f}")

# Sentiment distribution
sns.countplot(x='Sentiment', data=df)
plt.title("Original Sentiment Distribution")
plt.show()

# Rating vs Sentiment
sns.boxplot(x='Sentiment', y='Rating', data=df)
plt.title("Rating by Sentiment")
plt.show()

# TF-IDF Vectorization
tfidf = TfidfVectorizer(max_features=5000)
X = tfidf.fit_transform(df['Review']).toarray()

# Target
y = df['Sentiment']

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Define 'Success' based on rating
df['Success'] = df['Rating'].apply(lambda x: 1 if x >= 7 else 0)

# Features: VADER sentiment, rating, review length
X_success = df[['Rating', 'VADER_Sentiment']]
y_success = df['Success']

# Split and model
X_train, X_test, y_train, y_test = train_test_split(X_success, y_success, test_size=0.2, random_state=42)

model_success = LogisticRegression()
model_success.fit(X_train, y_train)

# Predict
y_pred_success = model_success.predict(X_test)
print("Success Prediction Accuracy:", accuracy_score(y_test, y_pred_success))

